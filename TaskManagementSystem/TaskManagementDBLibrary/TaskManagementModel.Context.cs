//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskManagementDBLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TaskManagementDBEntities : DbContext
    {
        public TaskManagementDBEntities()
            : base("name=TaskManagementDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AssignTaskUserSP(Nullable<System.Guid> taskID, Nullable<System.Guid> userID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignTaskUserSP", taskIDParameter, userIDParameter);
        }
    
        public virtual int DeactivateActivateUserTSP(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateActivateUserTSP", iDParameter);
        }
    
        public virtual int DeActivateProjectTSP(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeActivateProjectTSP", iDParameter);
        }
    
        public virtual int DeleteChecklistSP(Nullable<System.Guid> iD, Nullable<System.Guid> taskID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteChecklistSP", iDParameter, taskIDParameter);
        }
    
        public virtual ObjectResult<GetChecklistsPerTaskSP_Result> GetChecklistsPerTaskSP(Nullable<System.Guid> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChecklistsPerTaskSP_Result>("GetChecklistsPerTaskSP", taskIDParameter);
        }
    
        public virtual ObjectResult<GetGendesrSP_Result> GetGendesrSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGendesrSP_Result>("GetGendesrSP");
        }
    
        public virtual ObjectResult<GetLevelsSP_Result> GetLevelsSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLevelsSP_Result>("GetLevelsSP");
        }
    
        public virtual ObjectResult<GetProjectDetailsSP_Result> GetProjectDetailsSP(Nullable<System.Guid> iD, Nullable<System.Guid> taskID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectDetailsSP_Result>("GetProjectDetailsSP", iDParameter, taskIDParameter);
        }
    
        public virtual ObjectResult<GetProjectsListPerCreatorSP_Result> GetProjectsListPerCreatorSP(Nullable<System.Guid> creatorID)
        {
            var creatorIDParameter = creatorID.HasValue ?
                new ObjectParameter("CreatorID", creatorID) :
                new ObjectParameter("CreatorID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectsListPerCreatorSP_Result>("GetProjectsListPerCreatorSP", creatorIDParameter);
        }
    
        public virtual ObjectResult<GetProjectsListSP_Result> GetProjectsListSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectsListSP_Result>("GetProjectsListSP");
        }
    
        public virtual ObjectResult<GetRepeatIntervalsSP_Result> GetRepeatIntervalsSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepeatIntervalsSP_Result>("GetRepeatIntervalsSP");
        }
    
        public virtual ObjectResult<GetStatussSP_Result> GetStatussSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatussSP_Result>("GetStatussSP");
        }
    
        public virtual ObjectResult<GetTasksPerDayPerUserSP_Result> GetTasksPerDayPerUserSP(Nullable<System.Guid> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksPerDayPerUserSP_Result>("GetTasksPerDayPerUserSP", userIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetUserTSP_Result> GetUserTSP(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserTSP_Result>("GetUserTSP", iDParameter);
        }
    
        public virtual ObjectResult<GetUserTsSP_Result> GetUserTsSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserTsSP_Result>("GetUserTsSP");
        }
    
        public virtual int UnassignTaskToUserSP(Nullable<System.Guid> userID, Nullable<System.Guid> taskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnassignTaskToUserSP", userIDParameter, taskIDParameter);
        }
    
        public virtual int UpdateChecklistSP(Nullable<System.Guid> iD, Nullable<bool> isCompleted, Nullable<System.Guid> taskID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateChecklistSP", iDParameter, isCompletedParameter, taskIDParameter);
        }
    
        public virtual int UpdateProjectSP(Nullable<System.Guid> iD, string name, string desc, Nullable<System.Guid> creator, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate, Nullable<System.DateTime> actualStartDate, Nullable<System.DateTime> actualEndDate, Nullable<bool> isPrivate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var creatorParameter = creator.HasValue ?
                new ObjectParameter("Creator", creator) :
                new ObjectParameter("Creator", typeof(System.Guid));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            var actualStartDateParameter = actualStartDate.HasValue ?
                new ObjectParameter("ActualStartDate", actualStartDate) :
                new ObjectParameter("ActualStartDate", typeof(System.DateTime));
    
            var actualEndDateParameter = actualEndDate.HasValue ?
                new ObjectParameter("ActualEndDate", actualEndDate) :
                new ObjectParameter("ActualEndDate", typeof(System.DateTime));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectSP", iDParameter, nameParameter, descParameter, creatorParameter, expectedStartDateParameter, expectedEndDateParameter, actualStartDateParameter, actualEndDateParameter, isPrivateParameter);
        }
    
        public virtual int UpdateResponsibilitySP(Nullable<int> iD, string title, string desc)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateResponsibilitySP", iDParameter, titleParameter, descParameter);
        }
    
        public virtual int UpdateTaskSP(Nullable<System.Guid> iD, string name, string desc, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate, Nullable<System.DateTime> actualStartDate, Nullable<System.DateTime> actualEndDate, Nullable<bool> isPrivate, string folderPath, Nullable<int> weight, Nullable<int> priorityLevel, Nullable<int> status, Nullable<bool> isCompleted, Nullable<bool> isRepeated, Nullable<int> repeatInterval, Nullable<System.Guid> projectID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            var actualStartDateParameter = actualStartDate.HasValue ?
                new ObjectParameter("ActualStartDate", actualStartDate) :
                new ObjectParameter("ActualStartDate", typeof(System.DateTime));
    
            var actualEndDateParameter = actualEndDate.HasValue ?
                new ObjectParameter("ActualEndDate", actualEndDate) :
                new ObjectParameter("ActualEndDate", typeof(System.DateTime));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(bool));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var priorityLevelParameter = priorityLevel.HasValue ?
                new ObjectParameter("PriorityLevel", priorityLevel) :
                new ObjectParameter("PriorityLevel", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isRepeatedParameter = isRepeated.HasValue ?
                new ObjectParameter("IsRepeated", isRepeated) :
                new ObjectParameter("IsRepeated", typeof(bool));
    
            var repeatIntervalParameter = repeatInterval.HasValue ?
                new ObjectParameter("RepeatInterval", repeatInterval) :
                new ObjectParameter("RepeatInterval", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTaskSP", iDParameter, nameParameter, descParameter, expectedStartDateParameter, expectedEndDateParameter, actualStartDateParameter, actualEndDateParameter, isPrivateParameter, folderPathParameter, weightParameter, priorityLevelParameter, statusParameter, isCompletedParameter, isRepeatedParameter, repeatIntervalParameter, projectIDParameter);
        }
    
        public virtual int CreateUserTSP(Nullable<System.Guid> userID, string name, string username, Nullable<int> levelID, string desc, string email, string hashPass, string photoLink, Nullable<System.DateTime> registeredTime, Nullable<byte> onlineStatus, string phone, Nullable<int> gender, Nullable<System.DateTime> dOB, string address, Nullable<int> deptID, Nullable<byte> memberStatus)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var hashPassParameter = hashPass != null ?
                new ObjectParameter("HashPass", hashPass) :
                new ObjectParameter("HashPass", typeof(string));
    
            var photoLinkParameter = photoLink != null ?
                new ObjectParameter("PhotoLink", photoLink) :
                new ObjectParameter("PhotoLink", typeof(string));
    
            var registeredTimeParameter = registeredTime.HasValue ?
                new ObjectParameter("RegisteredTime", registeredTime) :
                new ObjectParameter("RegisteredTime", typeof(System.DateTime));
    
            var onlineStatusParameter = onlineStatus.HasValue ?
                new ObjectParameter("OnlineStatus", onlineStatus) :
                new ObjectParameter("OnlineStatus", typeof(byte));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var memberStatusParameter = memberStatus.HasValue ?
                new ObjectParameter("MemberStatus", memberStatus) :
                new ObjectParameter("MemberStatus", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUserTSP", userIDParameter, nameParameter, usernameParameter, levelIDParameter, descParameter, emailParameter, hashPassParameter, photoLinkParameter, registeredTimeParameter, onlineStatusParameter, phoneParameter, genderParameter, dOBParameter, addressParameter, deptIDParameter, memberStatusParameter);
        }
    
        public virtual int UpdateUserTSP(Nullable<System.Guid> iD, string name, string username, Nullable<int> levelID, string desc, string email, string hashPass, string photoLink, Nullable<System.DateTime> registeredTime, Nullable<byte> onlineStatus, string phone, Nullable<int> gender, Nullable<System.DateTime> dOB, string address, Nullable<int> deptID, Nullable<byte> memberStatus)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var hashPassParameter = hashPass != null ?
                new ObjectParameter("HashPass", hashPass) :
                new ObjectParameter("HashPass", typeof(string));
    
            var photoLinkParameter = photoLink != null ?
                new ObjectParameter("PhotoLink", photoLink) :
                new ObjectParameter("PhotoLink", typeof(string));
    
            var registeredTimeParameter = registeredTime.HasValue ?
                new ObjectParameter("RegisteredTime", registeredTime) :
                new ObjectParameter("RegisteredTime", typeof(System.DateTime));
    
            var onlineStatusParameter = onlineStatus.HasValue ?
                new ObjectParameter("OnlineStatus", onlineStatus) :
                new ObjectParameter("OnlineStatus", typeof(byte));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var memberStatusParameter = memberStatus.HasValue ?
                new ObjectParameter("MemberStatus", memberStatus) :
                new ObjectParameter("MemberStatus", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserTSP", iDParameter, nameParameter, usernameParameter, levelIDParameter, descParameter, emailParameter, hashPassParameter, photoLinkParameter, registeredTimeParameter, onlineStatusParameter, phoneParameter, genderParameter, dOBParameter, addressParameter, deptIDParameter, memberStatusParameter);
        }
    
        public virtual int CreateChecklistSP(Nullable<System.Guid> iD, Nullable<System.Guid> taskID, string desc, Nullable<bool> isCompleted, Nullable<int> weight)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateChecklistSP", iDParameter, taskIDParameter, descParameter, isCompletedParameter, weightParameter);
        }
    
        public virtual int CreateCommentSP(Nullable<System.Guid> iD, Nullable<System.Guid> taskID, Nullable<System.Guid> userID, string desc, Nullable<System.DateTime> datePosted)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var datePostedParameter = datePosted.HasValue ?
                new ObjectParameter("DatePosted", datePosted) :
                new ObjectParameter("DatePosted", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCommentSP", iDParameter, taskIDParameter, userIDParameter, descParameter, datePostedParameter);
        }
    
        public virtual int CreateProjectSP(Nullable<System.Guid> iD, string name, string desc, Nullable<System.Guid> creator, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate, Nullable<System.DateTime> actualStartDate, Nullable<System.DateTime> actualEndDate, Nullable<bool> isPrivate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var creatorParameter = creator.HasValue ?
                new ObjectParameter("Creator", creator) :
                new ObjectParameter("Creator", typeof(System.Guid));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            var actualStartDateParameter = actualStartDate.HasValue ?
                new ObjectParameter("ActualStartDate", actualStartDate) :
                new ObjectParameter("ActualStartDate", typeof(System.DateTime));
    
            var actualEndDateParameter = actualEndDate.HasValue ?
                new ObjectParameter("ActualEndDate", actualEndDate) :
                new ObjectParameter("ActualEndDate", typeof(System.DateTime));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateProjectSP", iDParameter, nameParameter, descParameter, creatorParameter, expectedStartDateParameter, expectedEndDateParameter, actualStartDateParameter, actualEndDateParameter, isPrivateParameter);
        }
    
        public virtual int CreateTaskSP(Nullable<System.Guid> iD, string name, string desc, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate, Nullable<System.DateTime> actualStartDate, Nullable<System.DateTime> actualEndDate, Nullable<bool> isPrivate, string folderPath, Nullable<int> weight, Nullable<int> priorityLevel, Nullable<System.Guid> creator, Nullable<int> status, Nullable<bool> isCompleted, Nullable<bool> isRepeated, Nullable<int> repeatInterval, Nullable<System.Guid> projectID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            var actualStartDateParameter = actualStartDate.HasValue ?
                new ObjectParameter("ActualStartDate", actualStartDate) :
                new ObjectParameter("ActualStartDate", typeof(System.DateTime));
    
            var actualEndDateParameter = actualEndDate.HasValue ?
                new ObjectParameter("ActualEndDate", actualEndDate) :
                new ObjectParameter("ActualEndDate", typeof(System.DateTime));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(bool));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var priorityLevelParameter = priorityLevel.HasValue ?
                new ObjectParameter("PriorityLevel", priorityLevel) :
                new ObjectParameter("PriorityLevel", typeof(int));
    
            var creatorParameter = creator.HasValue ?
                new ObjectParameter("Creator", creator) :
                new ObjectParameter("Creator", typeof(System.Guid));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isRepeatedParameter = isRepeated.HasValue ?
                new ObjectParameter("IsRepeated", isRepeated) :
                new ObjectParameter("IsRepeated", typeof(bool));
    
            var repeatIntervalParameter = repeatInterval.HasValue ?
                new ObjectParameter("RepeatInterval", repeatInterval) :
                new ObjectParameter("RepeatInterval", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTaskSP", iDParameter, nameParameter, descParameter, expectedStartDateParameter, expectedEndDateParameter, actualStartDateParameter, actualEndDateParameter, isPrivateParameter, folderPathParameter, weightParameter, priorityLevelParameter, creatorParameter, statusParameter, isCompletedParameter, isRepeatedParameter, repeatIntervalParameter, projectIDParameter);
        }
    
        public virtual ObjectResult<ListOfTasksAssignedToUserID_Result> ListOfTasksAssignedToUserID(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListOfTasksAssignedToUserID_Result>("ListOfTasksAssignedToUserID", userIDParameter);
        }
    
        public virtual ObjectResult<ListOfUsersAssignedToTaskIDSP_Result> ListOfUsersAssignedToTaskIDSP(Nullable<System.Guid> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListOfUsersAssignedToTaskIDSP_Result>("ListOfUsersAssignedToTaskIDSP", taskIDParameter);
        }
    
        public virtual ObjectResult<GetTaskSP_Result> GetTaskSP(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskSP_Result>("GetTaskSP", iDParameter);
        }
    
        public virtual int DeleteTaskUsersSP(Nullable<System.Guid> userID, Nullable<System.Guid> taskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTaskUsersSP", userIDParameter, taskIDParameter);
        }
    
        public virtual int RemoveResponsibilitySP(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveResponsibilitySP", iDParameter);
        }
    
        public virtual ObjectResult<GetCommentsPerTaskSP_Result> GetCommentsPerTaskSP(Nullable<System.Guid> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCommentsPerTaskSP_Result>("GetCommentsPerTaskSP", taskIDParameter);
        }
    
        public virtual int DeleteOrderEquipmentSP(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrderEquipmentSP", iDParameter);
        }
    
        public virtual int ReturnOrderSP(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnOrderSP", iDParameter);
        }
    
        public virtual int UpdateEquipmentSP(Nullable<int> iD, string name, string desc, Nullable<int> qty)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipmentSP", iDParameter, nameParameter, descParameter, qtyParameter);
        }
    
        public virtual ObjectResult<GetCompletedTasksPerDaySP_Result> GetCompletedTasksPerDaySP(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompletedTasksPerDaySP_Result>("GetCompletedTasksPerDaySP", dateParameter);
        }
    
        public virtual ObjectResult<GetChecklistsWeightPerTaskSP_Result> GetChecklistsWeightPerTaskSP(Nullable<System.Guid> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChecklistsWeightPerTaskSP_Result>("GetChecklistsWeightPerTaskSP", taskIDParameter);
        }
    
        public virtual int GetTasksPerDaySPTable(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTasksPerDaySPTable", dateParameter);
        }
    
        public virtual ObjectResult<GetTasksPerDaySP_Result> GetTasksPerDaySP(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksPerDaySP_Result>("GetTasksPerDaySP", dateParameter);
        }
    
        public virtual ObjectResult<GetTaskUsersSP_Result> GetTaskUsersSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskUsersSP_Result>("GetTaskUsersSP");
        }
    
        public virtual int DeactivateFistimeLogIn(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateFistimeLogIn", userIDParameter);
        }
    
        public virtual ObjectResult<LogUserSP_Result> LogUserSP(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogUserSP_Result>("LogUserSP", emailParameter);
        }
    
        public virtual ObjectResult<UerFullTextSearch_Result> UerFullTextSearch(string seachTerm)
        {
            var seachTermParameter = seachTerm != null ?
                new ObjectParameter("seachTerm", seachTerm) :
                new ObjectParameter("seachTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UerFullTextSearch_Result>("UerFullTextSearch", seachTermParameter);
        }
    
        public virtual int AddMemberToDepartmentResponsibilitiesSP(Nullable<System.Guid> userID, Nullable<int> deptID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMemberToDepartmentResponsibilitiesSP", userIDParameter, deptIDParameter);
        }
    
        public virtual int CreateResponsibilitySP(string title, string desc, Nullable<int> deptID)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateResponsibilitySP", titleParameter, descParameter, deptIDParameter);
        }
    
        public virtual ObjectResult<GetDepartmentSP_Result> GetDepartmentSP(Nullable<int> deptID)
        {
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartmentSP_Result>("GetDepartmentSP", deptIDParameter);
        }
    
        public virtual ObjectResult<GetDepartmentsSP_Result> GetDepartmentsSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartmentsSP_Result>("GetDepartmentsSP");
        }
    
        public virtual ObjectResult<GetOtherMembersInDeptRespSP_Result> GetOtherMembersInDeptRespSP(Nullable<int> deptID)
        {
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOtherMembersInDeptRespSP_Result>("GetOtherMembersInDeptRespSP", deptIDParameter);
        }
    
        public virtual ObjectResult<GetResponsibilitiesPerDeptSP_Result> GetResponsibilitiesPerDeptSP(Nullable<int> deptID)
        {
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResponsibilitiesPerDeptSP_Result>("GetResponsibilitiesPerDeptSP", deptIDParameter);
        }
    
        public virtual int GetResponsibilitiesSP(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetResponsibilitiesSP", userIDParameter);
        }
    
        public virtual int RemoveMemberFromDepartmentResponsibilitiesSP(Nullable<System.Guid> userID, Nullable<int> deptID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveMemberFromDepartmentResponsibilitiesSP", userIDParameter, deptIDParameter);
        }
    
        public virtual ObjectResult<GetNotificationType_Result> GetNotificationType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationType_Result>("GetNotificationType");
        }
    
        public virtual int UpdateIsCompletedTaskSP(Nullable<System.Guid> iD, Nullable<bool> isCompleted, Nullable<System.DateTime> date)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIsCompletedTaskSP", iDParameter, isCompletedParameter, dateParameter);
        }
    
        public virtual int ApproveEquipmentsSP(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveEquipmentsSP", iDParameter);
        }
    
        public virtual int CreateEquipmentSP(string name, string desc, Nullable<int> qty, Nullable<bool> isApproved)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateEquipmentSP", nameParameter, descParameter, qtyParameter, isApprovedParameter);
        }
    
        public virtual ObjectResult<GetEquipmentsSP_Result> GetEquipmentsSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipmentsSP_Result>("GetEquipmentsSP");
        }
    
        public virtual int CreateNotification(Nullable<System.Guid> notiID, Nullable<System.Guid> uSER_ID, Nullable<byte> typeID, string message)
        {
            var notiIDParameter = notiID.HasValue ?
                new ObjectParameter("notiID", notiID) :
                new ObjectParameter("notiID", typeof(System.Guid));
    
            var uSER_IDParameter = uSER_ID.HasValue ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(System.Guid));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(byte));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNotification", notiIDParameter, uSER_IDParameter, typeIDParameter, messageParameter);
        }
    
        public virtual int DeleteUserNotifications(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserNotifications", userIDParameter);
        }
    
        public virtual int CreateUserNotification(Nullable<System.Guid> userID, Nullable<System.Guid> notiID, Nullable<System.Guid> sender_ID, Nullable<byte> typeID, string message)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var notiIDParameter = notiID.HasValue ?
                new ObjectParameter("notiID", notiID) :
                new ObjectParameter("notiID", typeof(System.Guid));
    
            var sender_IDParameter = sender_ID.HasValue ?
                new ObjectParameter("sender_ID", sender_ID) :
                new ObjectParameter("sender_ID", typeof(System.Guid));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(byte));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUserNotification", userIDParameter, notiIDParameter, sender_IDParameter, typeIDParameter, messageParameter);
        }
    
        public virtual ObjectResult<GetListOfTodayNotification_Result> GetListOfTodayNotification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListOfTodayNotification_Result>("GetListOfTodayNotification");
        }
    
        public virtual ObjectResult<GetUserNotifications_Result> GetUserNotifications(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserNotifications_Result>("GetUserNotifications", userIDParameter);
        }
    
        public virtual int UpdateEquipmentStatusSP(Nullable<int> eqID, Nullable<int> statusID, Nullable<System.Guid> oEID, Nullable<System.DateTime> time)
        {
            var eqIDParameter = eqID.HasValue ?
                new ObjectParameter("EqID", eqID) :
                new ObjectParameter("EqID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var oEIDParameter = oEID.HasValue ?
                new ObjectParameter("OEID", oEID) :
                new ObjectParameter("OEID", typeof(System.Guid));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipmentStatusSP", eqIDParameter, statusIDParameter, oEIDParameter, timeParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> CreateOrderEquipmentSP(Nullable<int> eqID, Nullable<System.Guid> userID, Nullable<int> qty, Nullable<System.DateTime> date, string comment)
        {
            var eqIDParameter = eqID.HasValue ?
                new ObjectParameter("EqID", eqID) :
                new ObjectParameter("EqID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("CreateOrderEquipmentSP", eqIDParameter, userIDParameter, qtyParameter, dateParameter, commentParameter);
        }
    
        public virtual ObjectResult<GetOrderShoppingCartSP_Result> GetOrderShoppingCartSP(Nullable<System.Guid> userID, Nullable<System.DateTime> todayDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("TodayDate", todayDate) :
                new ObjectParameter("TodayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderShoppingCartSP_Result>("GetOrderShoppingCartSP", userIDParameter, todayDateParameter);
        }
    
        public virtual ObjectResult<GetAllPreviousTasksPerCalendarDaySP_Result> GetAllPreviousTasksPerCalendarDaySP(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPreviousTasksPerCalendarDaySP_Result>("GetAllPreviousTasksPerCalendarDaySP", dateParameter);
        }
    
        public virtual ObjectResult<GetCompletedCalendarTasksPerDaySP_Result> GetCompletedCalendarTasksPerDaySP(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompletedCalendarTasksPerDaySP_Result>("GetCompletedCalendarTasksPerDaySP", dateParameter);
        }
    
        public virtual ObjectResult<GetTasksPerCalendarDayPerUserSP_Result> GetTasksPerCalendarDayPerUserSP(Nullable<System.DateTime> date, Nullable<System.Guid> userID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksPerCalendarDayPerUserSP_Result>("GetTasksPerCalendarDayPerUserSP", dateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetTasksPerCalendarDaySP_Result> GetTasksPerCalendarDaySP(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksPerCalendarDaySP_Result>("GetTasksPerCalendarDaySP", dateParameter);
        }
    
        public virtual ObjectResult<GetOrdersPerEquipmentSP_Result> GetOrdersPerEquipmentSP(Nullable<int> eqID, Nullable<System.DateTime> date)
        {
            var eqIDParameter = eqID.HasValue ?
                new ObjectParameter("EqID", eqID) :
                new ObjectParameter("EqID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersPerEquipmentSP_Result>("GetOrdersPerEquipmentSP", eqIDParameter, dateParameter);
        }
    
        public virtual int CreateAlert(Nullable<System.Guid> alertID, Nullable<System.Guid> alertCreatedByID, string alertDescription)
        {
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("alertID", alertID) :
                new ObjectParameter("alertID", typeof(System.Guid));
    
            var alertCreatedByIDParameter = alertCreatedByID.HasValue ?
                new ObjectParameter("alertCreatedByID", alertCreatedByID) :
                new ObjectParameter("alertCreatedByID", typeof(System.Guid));
    
            var alertDescriptionParameter = alertDescription != null ?
                new ObjectParameter("alertDescription", alertDescription) :
                new ObjectParameter("alertDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAlert", alertIDParameter, alertCreatedByIDParameter, alertDescriptionParameter);
        }
    
        public virtual ObjectResult<GetTodayAlert_Result> GetTodayAlert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTodayAlert_Result>("GetTodayAlert");
        }
    
        public virtual int CreateDepartmentSP(string desc, Nullable<System.Guid> hOD)
        {
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var hODParameter = hOD.HasValue ?
                new ObjectParameter("HOD", hOD) :
                new ObjectParameter("HOD", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDepartmentSP", descParameter, hODParameter);
        }
    
        public virtual int DeleteDepartmentSP(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDepartmentSP", iDParameter);
        }
    
        public virtual ObjectResult<GetCurrentDepartmentHODSP_Result> GetCurrentDepartmentHODSP(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentDepartmentHODSP_Result>("GetCurrentDepartmentHODSP", iDParameter);
        }
    
        public virtual int UpdatDepartmentSP(Nullable<int> iD, string desc, Nullable<System.Guid> hOD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var hODParameter = hOD.HasValue ?
                new ObjectParameter("HOD", hOD) :
                new ObjectParameter("HOD", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatDepartmentSP", iDParameter, descParameter, hODParameter);
        }
    
        public virtual ObjectResult<GetTodaysOrdersSP_Result> GetTodaysOrdersSP(Nullable<System.DateTime> todayDate)
        {
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("TodayDate", todayDate) :
                new ObjectParameter("TodayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTodaysOrdersSP_Result>("GetTodaysOrdersSP", todayDateParameter);
        }
    
        public virtual ObjectResult<GetUserDetails_Result> GetUserDetails(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetails_Result>("GetUserDetails", iDParameter);
        }
    
        public virtual int ChangeUserPictName(Nullable<System.Guid> userID, string pictureName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            var pictureNameParameter = pictureName != null ?
                new ObjectParameter("pictureName", pictureName) :
                new ObjectParameter("pictureName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeUserPictName", userIDParameter, pictureNameParameter);
        }
    
        public virtual ObjectResult<OrdersNotReturnedSP_Result> OrdersNotReturnedSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdersNotReturnedSP_Result>("OrdersNotReturnedSP");
        }
    
        public virtual ObjectResult<UpdateRoleSP_Result> UpdateRoleSP(Nullable<int> deptID, Nullable<System.Guid> userID, Nullable<System.Guid> superUserID)
        {
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var superUserIDParameter = superUserID.HasValue ?
                new ObjectParameter("SuperUserID", superUserID) :
                new ObjectParameter("SuperUserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateRoleSP_Result>("UpdateRoleSP", deptIDParameter, userIDParameter, superUserIDParameter);
        }
    }
}
